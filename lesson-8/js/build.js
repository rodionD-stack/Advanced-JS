(() => { "use strict"; Vue.component("goods-list", { template: '\n        <div class="goods-list">\n            <goods-item v-for="good in goods" :good="good"></goods-item>\n        </div>\n    ', props: ["goods"] }), Vue.component("cart-list", { template: '\n        <div class="cart-list">\n            <cart-item v-for="good in goods" :good="good"></cart-item>\n        </div>\n    ', props: ["goods"] }), Vue.component("goods-item", { template: '\n        <div class="goods-item">\n            <img src="img/image.png" alt="image">\n            <h3>{{ good.product_name }}</h3>\n            <p>{{ good.price }}</p>\n            <button class="goods-item__add-to-cart" @click="$parent.$parent.addToCart(good)">\n                 Добавить товар\n            </button>\n        </div>\n    ', props: ["good"] }), Vue.component("cart-item", { template: '\n        <div class="cart-item">\n            <img src="img/image.png" alt="image">\n            <h3>{{ good.product_name }}</h3>\n            <p>{{ good.totalPrice }}</p>\n            <p>{{ good.count }} шт.</p>\n            <button class="cart-item__remove-from-cart" @click="$parent.$parent.removeFromCart(good)">\n                 Удалить товар\n            </button>\n        </div>\n    ', props: ["good"] }), Vue.component("cart-button", { template: '\n        <button class="cart-button" type="button" @click="$parent.showCart">\n            <div>Корзина</div>\n            <div class="cart-size" v-if="$parent.shopCart.length!=0">{{ size }}</div>\n        </button>\n    ', props: ["size"] }), Vue.component("search", { template: '\n        <div>\n            <input type="text" class="goods-search" v-model="$parent.searchLine">\n            <button class="search-button" type="button" @click="handler()"></button>\n        </div>\n    ', props: ["handler"] }), Vue.component("error", { template: '\n        <h2 v-if="$parent.filteredGoods.length == 0">Ничего не найдено</h2>\n    ' }); const t = new Vue({ el: "#app", data: { goods: [], filteredGoods: [], isVisibleCart: !1, isVisibleCatalog: !0, shopCart: [], searchLine: "" }, methods: { async fetch() { let t = await fetch("/catalog"), o = await t.json(); this.goods = await o, this.filteredGoods = await o; let e = await fetch("/cart"), s = await e.json(); this.shopCart = await s }, filterGoods() { this.filteredGoods = this.goods.filter((t => t.product_name.toLowerCase().includes(this.searchLine.toLowerCase()))) }, async addToCart(t) { JSON.stringify(t.id_product); let o = await fetch("/addToCart", { method: "POST", mode: "cors", headers: { "Content-Type": "application/json;charset=utf-8" }, body: JSON.stringify([t.id_product]) }); this.shopCart = await o.json() }, async removeFromCart(o) { JSON.stringify(o.id_product); let e = await fetch("/removeFromCart", { method: "POST", mode: "cors", headers: { "Content-Type": "application/json;charset=utf-8" }, body: JSON.stringify([o.id_product]) }); this.shopCart = await e.json(), this.isVisibleCart = !1, setTimeout((() => t.isVisibleCart = !0), 0) }, showCart() { this.isVisibleCart = !this.isVisibleCart, this.isVisibleCatalog = !this.isVisibleCatalog } }, computed: { shopCartSize() { return this.shopCart.length }, renderCart() { let t = this.shopCart.length, o = []; for (let e = 0; e < t; e++) { let t = this.goods.find((t => t.id_product == this.shopCart[e])); if (o.includes(t)) { let e = o.indexOf(t); o[e].count++, o[e].totalPrice = o[e].price * o[e].count } else t.count = 1, t.totalPrice = t.price * t.count, o.push(t) } return o } }, async mounted() { await this.fetch() } }) })();